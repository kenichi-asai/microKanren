;; Jason Hemann and Dan Friedman
;; microKanren, final implementation from paper

(define (var c) (vector c))
(define (var? x) (vector? x))
(define (var=? x1 x2) (= (vector-ref x1 0) (vector-ref x2 0)))

(define (walk u s)
  (let ((pr (and (var? u) (assp (lambda (v) (var=? u v)) s))))
    (if pr (walk (cdr pr) s) u)))

(define (ext-s x v s) `((,x . ,v) . ,s))

(define (== u v)
  (lambda (s/c)
    (let ((s (unify u v (car s/c))))
      (if s (unit `(,s . ,(cdr s/c))) mzero))))

(define (unit s/c) (cons s/c mzero))
(define mzero '())

(define (unify u v s)
  (let ((u (walk u s)) (v (walk v s)))
    (cond
      ((and (var? u) (var? v) (var=? u v)) s)
      ((var? u) (ext-s u v s))
      ((var? v) (ext-s v u s))
      ((and (pair? u) (pair? v))
       (let ((s (unify (car u) (car v) s)))
         (and s (unify (cdr u) (cdr v) s))))
      (else (and (eqv? u v) s)))))

(define (call/fresh f)
  (lambda (s/c)
    (let ((c (cdr s/c)))
      ((f (var c)) `(,(car s/c) . ,(+ c 1))))))

(define thunk-tag (cons 'thunk 'tag))
(define disj-tag (cons 'disj 'tag))
(define conj-tag (cons 'conj 'tag))
(define (make-thunk g s/c) (cons thunk-tag (cons g s/c)))
(define (make-disj-thunk $1 $2) (cons disj-tag (cons $1 $2)))
(define (make-conj-thunk $ g) (cons conj-tag (cons $ g)))
(define (force-thunk thunk)
  (if (thunk? thunk)
    (let ((tag (car thunk)))
      (cond
        ((eq? tag thunk-tag)
         (let ((g (car (cdr thunk)))
               (s/c (cdr (cdr thunk))))
           (g s/c)))
        ((eq? tag disj-tag)
         (let (($1 (car (cdr thunk)))
               ($2 (cdr (cdr thunk))))
           (mplus $2 (force-thunk $1))))
        ((eq? tag conj-tag)
         (let (($ (car (cdr thunk)))
               (g (cdr (cdr thunk))))
           (bind (force-thunk $) g)))))
    thunk))
(define (thunk? $)
  (and (pair? $)
       (or (eq? (car $) thunk-tag)
           (eq? (car $) disj-tag)
           (eq? (car $) conj-tag))))

(define (disj g1 g2) (lambda (s/c) (mplus (g1 s/c) (g2 s/c))))
(define (conj g1 g2) (lambda (s/c) (bind (g1 s/c) g2)))

(define (mplus $1 $2)
  (cond
    ((null? $1) $2)
    ((thunk? $1) (make-disj-thunk $1 $2))
    (else (cons (car $1) (mplus (cdr $1) $2)))))

(define (bind $ g)
  (cond
    ((null? $) mzero)
    ((thunk? $)
     (let ((tag (car $)))
       (cond
         ((eq? tag thunk-tag)
          (let ((g2 (car (cdr $)))
                (s/c2 (cdr (cdr $))))
            (make-conj-thunk (make-thunk g s/c2) g2)
          ))
         ((eq? tag disj-tag)
          (let (($1 (car (cdr $)))
                ($2 (cdr (cdr $))))
            (make-disj-thunk (make-conj-thunk $1 g) (make-conj-thunk $2 g))
          ))
         ((eq? tag conj-tag)
          (let (($2 (car (cdr $)))
                (g2 (cdr (cdr $))))
            (make-conj-thunk (make-conj-thunk $2 g2) g)
          )))))
    (else (mplus (g (car $)) (bind (cdr $) g)))))
